===================== 46 ============================
<button onClick={this.changeNameHandler.bind(this, 'maximilian')}>Chenge name</button>   
<div onClick={()=>this.changeNameHandler('max!')}>change </div>
// Это очень удобный синтаксис, но он может быть неэффективным,
//  реакт может слишком часто повторно отображать определенные вещи в вашем приложении,
//   поэтому я не обязательно рекомендую использовать это, если вам не нужно, используйте синтаксис привязки вместо этого,
//    если вы можете. Тем не менее, я оставлю его здесь, вы можете использовать его,
//     и в зависимости от размера вашего приложения вы также можете
//  не почувствовать большого снижения производительности, но имейте в виду, 
//  что это может быть неэффективно.
=================== 53 ========================
мы могли бы использовать оба синтаксиса, этот синтаксис здесь, который создаст метод, здесь у нас будут проблемы
если мы хотим использовать ключевое слово this,
и поскольку мы будем вызывать этот метод здесь при возникновении события в dom, это может привести к реальным проблемам.
Поэтому я буду использовать другой синтаксис для назначения функции стрелки для свойства,
в конце он также создаст метод,
это просто другой синтаксис, и благодаря внутреннему устройству javascript это гарантирует, что this, this
ключевое слово внутри этого метода всегда при любых обстоятельствах возвращается в этот класс,
==================97 optimization ==================
хорошо, если вы затем обернули все свои компоненты этими дополнительными проверками, тогда вы выполняете 
ненужные проверки на 60% кодовой базы компонентов, и это не совсем то, что вы действительно хотите делать. Так
вы должны тщательно это оценить, является ли эта составная часть родительского компонента, которая может измениться, 
связана с чем-то, что меня совсем не затрагивает, как это имеет место здесь, когда компонент Person, безусловно, 
не заинтересован в изменениях, связанных с кабиной, ну тогда вы должны реализовать здесь свой чек. В противном случае,
 если вы уверены, что во всех или почти во всех случаях, когда ваш родитель обновляется, вам также нужно будет обновить,
  тогда вам не следует добавлять shouldComponentUpdate или React memo, потому что вы просто выполните некоторую дополнительную логику,
   которая не имеет смысла и на самом деле просто немного замедляет работу приложения.